function CST = fitCST(file,order)

[X,Y] = importAirfoilCoordinates(file);


[~,zerind] = min(X(:,1)); % Used to separate upper and lower surfaces

Xl= X(1:zerind-1); % Lower surface x-coordinates
Xu = X(zerind:end); % Upper surface x-coordinates

Yl= Y(1:zerind-1); % Lower surface x-coordinates
Yu = Y(zerind:end); % Upper surface x-coordinates

plot(Xu,Yu,'or')
hold on
plot(Xl,Yl,'ob')
axis equal

modelFun = @(w,x) ClassShape(w,x,0.5,1,0);

start = ones(1,order);

nlmu = fitnlm(Xu,Yu,modelFun,start);
xx = linspace(0,1)';
line(xx,predict(nlmu,xx),'linestyle','--','color','k')

nlml = fitnlm(Xl,Yl,modelFun,start);
xx = linspace(0,1)';
line(xx,predict(nlml,xx),'linestyle','--','color','k')

CST = [nlmu.Coefficients.Estimate;nlml.Coefficients.Estimate];

end

function [y] = ClassShape(w,x,N1,N2,dz);


% Class function; taking input of N1 and N2
for i = 1:size(x,1)
    C(i,1) = x(i)^N1*((1-x(i))^N2);
end

% Shape function; using Bernstein Polynomials
n = size(w,2)-1; % Order of Bernstein polynomials

for i = 1:n+1
     K(i) = factorial(n)/(factorial(i-1)*(factorial((n)-(i-1))));
end

for i = 1:size(x,1)
    S(i,1) = 0;
    for j = 1:n+1
        S(i,1) = S(i,1) + w(j)*K(j)*x(i)^(j-1)*((1-x(i))^(n-(j-1)));
    end
end

% Calculate y output
for i = 1:size(x,1)
   y(i,1) = C(i,1)*S(i,1) + x(i)*dz;
end

end

function [S1223,VarName2] = importAirfoilCoordinates(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [S1223,VARNAME2] = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   [S1223,VARNAME2] = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [S1223,VarName2] = importfile('S1223.txt',2, 82);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/05/11 02:21:10

%% Initialize variables.
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%9f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
S1223 = dataArray{:, 1};
VarName2 = dataArray{:, 2};
end
